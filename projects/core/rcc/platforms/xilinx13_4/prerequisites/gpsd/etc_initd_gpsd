#!/bin/sh
### BEGIN INIT INFO
# Provides:          gpsd
# Required-Start:    $remote_fs $network
# Should-Start:      bluetooth dbus udev
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: GPS (Global Positioning System) daemon start/stop script
# Description:       Start/Stop script for the gpsd service daemon,
#                    which is able to monitor one or more GPS devices
#                    connected to a host computer, making all data on
#                    the location and movements of the sensors available
#                    to be queried on TCP port 2947.
### END INIT INFO

# Author: opencpi
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="GPS (Global Positioning System) daemon"
NAME=gpsd
OCPI_PATH=
[ -z "$OCPI_PATH" ] && DAEMON=/usr/sbin/$NAME || \
  DAEMON=$OCPI_PATH/$NAME
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
DEVICES=/dev/ttyPS1

# Exit if the package is not installed
if [ ! -x "$DAEMON" ]; then
  echo "$DAEMON does not exist or it is not executable"
  exit 0
fi

# Read configuration, if present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

if [ -z "$GPSD_SOCKET" ] && [ -z "$DEVICES" ]; then
  GPSD_SOCKET=/var/run/gpsd.sock
fi

if [ -n "$GPSD_SOCKET" ]; then
  GPSD_OPTIONS="$GPSD_OPTIONS -F $GPSD_SOCKET"
fi

if [ -n "$DEVICES" ]; then
  GPSD_OPTIONS="$GPSD_OPTIONS $DEVICES -n"
fi

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test \
  -- $GPSD_OPTIONS -P $PIDFILE $GPS_DEVICES > /dev/null \
    || return 1
  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
    $GPSD_OPTIONS -P $PIDFILE $GPS_DEVICES \
    || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  # Many daemons don't delete their pidfiles when they exit.
  rm -f $PIDFILE
  # Wait for file lock to release
  NSEC=30
  while [ $NSEC -gt 0 ]; do
    fuser $GPS_DEVICES > /dev/null
    [ "$?" = 1 ] && return $RETVAL
    let NSEC=NSEC-1
    sleep 1
    echo waiting for file lock on $GPS_DEVICES to release...
  done
  return 3
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  #
  # If the daemon can reload its configuration without
  # restarting (for example, when it is sent a SIGHUP),
  # then implement that here.
  #
  start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
  return 0
}

case "$1" in
  start)
    echo "Starting $DESC" "$NAME"
    do_start
    exit $?
    ;;
  stop)
    echo "Stopping $DESC" "$NAME"
    do_stop
    exit $?
    ;;
  status)
    ;;
  reload|force-reload)
    echo "Reloading $DESC" "$NAME"
    do_reload
    exit $?
    ;;
  restart)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    echo "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        exit $?
        ;;
      *)
        # Failed to stop
        exit 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:

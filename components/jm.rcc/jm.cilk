/*
 * THIS FILE WAS ORIGINALLY GENERATED ON Mon Jul 14 13:06:20 2014 EDT
 * BASED ON THE FILE: jm.xml
 * YOU *ARE* EXPECTED TO EDIT IT
 *
 * This file contains the implementation skeleton for the jm worker in C++
 */

#include "jm-worker.hh"
#include "jmc.h"
#include <stdio.h>


using namespace OCPI::RCC; // for easy access to RCC data types and constants


int __cilk myCilkEntrypointWrapper (void *args )
{
  // Unbundle the parameters and do the work
  JmWorkerCilk::Args * uargs = (JmWorkerCilk::Args*)args;
  printf("In cilk context\n");
  uargs->result = uargs->jmwc->_cilk_run( *uargs->jmwb );
  return 0;
}


class JmWorker : public JmWorkerBase {

private:
  JmWorkerCilk cilkW;
  cilk::context cilkCtx;

public:
  RCCResult run(bool /*timedout*/) {


    JmWorkerCilk::Args args = { &cilkW, this, OCPI::RCC::RCC_OK  };
    cilkCtx.set_worker_count( 8 );  // Number of cores to use
    cilkCtx.run( (cilk::pcilkfn)myCilkEntrypointWrapper, (void *)&args);
    return args.result;


//    cilkW._cilk_run( *this );



  }

  RCCResult __cilk cilk_run(bool /*timedout*/) {

    /*
    JmWorkerCilk::Args args = { &cilkW, this, OCPI::RCC::RCC_OK  };
    cilkCtx.set_worker_count( 8 );  // Number of cores to use
    cilkCtx.run( (cilk::pcilkfn)myCilkEntrypointWrapper, (void *)&args);
    return args.result;
    */

    cilkW._cilk_run( *this );



  }

};

JM_START_INFO
// Insert any static info assignments here (memSize, memSizes, portInfo)
// e.g.: info.memSize = sizeof(MyMemoryStruct);
JM_END_INFO

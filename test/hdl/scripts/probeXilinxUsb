#!/bin/bash
# FIXME: why bash?
# bitgen option.userid...biggen_bin.ut "userid on line 21 - feed5200".
if [[ $# == 0 ]]; then
  echo Usage is: `basename $0` '[all|auto]'
  echo '  'This script scans usb ports for Xilinx JTAG cables/pods and
  echo '  'prints which parts are at which positions on each one found.
  echo '  Use "all" to scan for up to 9 cables.  Use "auto" to find the first.'
  exit 1
elif [[ "$OCPI_XILINX_TOOLS_DIR" == "" ]] ; then
  echo Error: environment variable OCPI_XILINX_TOOLS_DIR not set.
  exit 1
elif test ! -x $OCPI_XILINX_TOOLS_DIR/ISE/bin/lin64/impact; then
  echo Error: \$OCPI_XILINX_TOOLS_DIR/ISE/bin/lin64/impact not found
  exit 1
fi
temp=/tmp/ocpibitstream$$
tlog=$temp.1
tmp=$temp.2
port=${1:-auto}
function good {
  #rm -f $temp.*
  exit 0
}
function bad {
  rm -f $tmp
  echo Look at $tlog.\* for details.
  exit 1
}
#part=${1:-xc5vlx50t}
#pos=${2:-1}
#echo part "$part" pos "$pos" port "$port"
# impact expects to overwrite/create this file.  In the off chance that it exists
# and is not writable by us, we remove it first.
# This will still fail if we don't have write permission in the directory,
# but that is what impact will tell us in that case
rm -f _impactbatch.log
imp="$OCPI_XILINX_TOOLS_DIR/ISE/bin/lin64/impact -batch"
if [[ $port == all ]]; then
  echo listusbcables | $imp 2> $tlog > $tmp
  ports=`grep '^port=' $tmp | sed 's/port=\(.*\), .*$/\1/'`
  echo Discovered ports are: $ports
  # ports="usb21 usb22 usb23 usb24 usb25 usb26 usb27 usb28 usb29"
  # exit 1
else
  ports=$port
fi
anyport=
for p in $ports; do
if [[ $p == auto ]]; then
  echo -n Looking for first Xilinx USB port...
else
  echo -n Trying port $p...
fi
echo setMode -bs/setCable -p $p | tr / \\n | $imp  2> $tlog.$p 1>&2
if test $? == 0; then
  #cat $tlog.$p
   if grep -q '^Cable connection established.' $tlog.$p; then
      ed $tlog.$p <<EOF > /dev/null 2>&1
      /Usb Port -/
      .=
      s/^.*Usb Port - \(USB[^)]*\).*\$/\1/
      .=
      1,-d
      2,\$d
      w $tmp
EOF
      myport=`cat $tmp`
      myportlc=`echo $myport | tr A-Z a-z`
      if grep -q 'ESN device is not available' $tlog.$p ; then
	  myesn=0123456789ABCD
	  echo USB Pod have no ESN, so we\'ll use $myesn. You can only have one of these.
      else
      ed $tlog.$p <<EOF  > /dev/null 2>&1
      /ESN.*option:/
      .=
      s/^.*ESN.*option: *\(.*\).\$/\1/
      1,-d
      2,\$d
      w $tmp
EOF
      myesn=`cat $tmp`
      fi
      if [[ $myport == USB* ]]; then
         echo USB Cable Connection verified on port $myportlc, ESN is $myesn
	 anyport=yes
      else
	 echo USB Cable Connection on port $p verified, but actual port not discovered \(port = $myport\?\)
	 bad
      fi
   else
      echo USB Cable connection on port $p not successfully verified.
      bad
   fi
else
   echo USB Cable connection not verified.
   continue
fi
any=
for pos in 1 2 3 4 5 6 7 8 9; do
#  echo Trying position $pos
  echo setMode -bs/setCable -p $p/identify/readidcode -p $pos | tr / \\n | $imp  2> $tlog.$p.$pos.id 1>&2
  last=$?
  #echo status:$? $tlog.$p.$pos.id 
  if test $last == 0; then
    ed $tlog.$p.$pos.id <<EOF > /dev/null 2>&1
      $
      ?IDCODE?+
      s/^.*Xilinx \([^,]*\),.*\$/\1/p
      1,-d
      2,\$d
      w $tmp
EOF
    mypart=`cat $tmp`
    echo Part at position $pos on $myportlc is $mypart
    any=yes
    continue
    echo setMode -bs/setCable -p $p/identify/readidcode -p $pos/readusercode -p $pos | tr / \\n | $imp  2> $tlog.$p.$pos.user 1>&2
    last=$?
    if test $last == 0; then
      ed $tlog.$p.$pos.user <<EOF > /dev/null 2>&1
        $
        ?: Usercode is ?
        s/^.*Usercode is '\([^']*\)'.*\$/\1/p
        1,-d
        2,\$d
        w $tmp
EOF
      myusercode=`cat $tmp`
      echo -n ', 'UserID code is $myusercode
      #cat $tlog
      #mv $tlog $tlog.$myport.$pos
      any=yes
    else
      echo -n ', no UserID'
    fi
    echo setMode -bs/setCable -p $p/identify/readdna -p $pos | tr / \\n | $imp  2> $tlog.$p.$pos.dna 1>&2
    last=$?
    if test $last == 0; then
      #cat $tlog
      ed $tlog.$p.$pos.dna <<EOF > /dev/null 2>&1
        $
        ?DNA *= *'?
        s/^.*DNA *= *'\([^']*\)'.*\$/\1/p
        1,-d
        2,\$d
        w $tmp
EOF
      mydna=`cat $tmp`
      if [[ $mydna == "111111111111111111111111111111111111111111111111111111111" ]]; then
         mydna=unavailable
      fi
      echo ', 'DNA code is $mydna
    else
      echo ', 'no DNA code
    fi
  else
    if [[ $any == "" ]]; then
      echo No part with user id at position $pos
    else
      break
    fi
  fi
done
if [[ $any != yes ]]; then
  echo No valid positions found on port $myportlc.
fi
done
if [[ $anyport != yes ]]; then
  bad
else
  good
fi


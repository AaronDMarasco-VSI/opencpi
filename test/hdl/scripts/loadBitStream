#!/bin/csh -f
if ($#argv != 4) then
    echo Usage is: `basename $0` bit_file PCI_device USB_portname part-name
    echo '  'An example is '(for an ML555)' is:
    echo '    'loadBitStream testbias-ml555.bit 0000:02:00.0 usb21 xc5vlx50t
    echo '  'To find the PCI devices, use the '"sudo ocfrp_check"' command.
    echo '  'With ocfrp_check, OpenCPI boards with valid bitstreams look like:
    echo '    'Found an OpenOCPI FPGA at PCI 0000:04:00.0 with BSV birthday: Mon Jan 24 10:43:59 2011
    echo '  'Use "probeXilinxUsb all" to find out usb port names, parts and jtag positions.
    echo '  'This loading script will automatically find the jtag position of the specified part.
    echo '  'If it doesn\'t find the part, it will say so and fail.
    echo '  'For now, you must select the correct USB port and part for the device.
    exit 1
endif
#set bin = ./linux-x86_64-bin
#FIXME: check for the error when the file has wildcards that don't match anything
set bitfile = $argv[1]
set device = $argv[2]
set usbport = $argv[3]
set part = $argv[4]
set temp = /tmp/cpibitstream$$
set tscript =  $temp.1
set tbar = $temp.2
set tlog = $temp.3
set tmp = $temp.3
set golden = /opt/cpi/ocfrp/pci-config-snapshots/$device
echo Loading bit file $bitfile onto PCI device $device via usb port $usbport.
if ( ! ( -f $bitfile && -r $bitfile ) ) then
  echo Bitstream file \"$bitfile\" does not exist or is inaccessible.
  exit 1
endif
findJtagPart $usbport $part > $tmp
if ($status != 0) then
  echo Error: Could not find jtag position for part $part on USB port $usbport.
  exit 1
else
  set pos=`cat $tmp`
  echo The JTAG position of part $part on port $usbport is $pos
endif
echo Checking existing loaded bitstream..
sudo ocfrp_check $device
if ($status != 0) then
   echo Existing loaded bitstream does not appear to be functional.
   if (! -f $golden) then
     echo There is no config snapshot in $golden to restore.
     exit 1
   endif
   echo We will use the golden bitstream in $golden
   set pciConfig = $golden
else
   echo Existing loaded bitstream looks ok, proceeding to snapshot the PCI config space \(into $tbar\)
   sudo cp /sys/bus/pci/devices/$device/config $tbar	
   sudo chmod a+rw $tbar
   if ($status != 0) then
      echo Error: we could not snapshot the PCI configuration before loading
      rm $tbar
      exit 1
   endif
   echo PCI configuration for $device captured in $tbar.
   #ls -l $tbar
   set golden = $tbar
endif
if ( $bitfile =~ *[,\.-]gz) then
  echo The bitstream file \"$bitfile\" is compressed.  Expanding it to a temporary file.
  gunzip -q -c < $bitfile > $temp.bit    
  # Note that gunzip issues warnings and returns status == 2 when there is
  # junk at the end of the file - which we use for artifact metadata of course.
  if ($status != 0 && $status != 2) then
    echo Decompression failed.; exit 1
  endif
  echo Bitstream file decompressed into $temp.bit
  set bitfile = $temp.bit
endif
cat > $tscript <<EOF
setMode -bs
setCable -port $usbport
Identify
assignFile -p $pos -file $bitfile
Program -p $pos
exit
EOF
set bad = 1
echo Loading bitstream...
#IdentifyMPM
#cat $tscript
#ls -l $bitfile
csh -c "source $OCPI_XILINX_TOOLS_DIR/settings64.csh; rehash;impact -batch $tscript">&$tlog
if ($status != 0) then
  echo Error: impact bitstream loader failed. See $tlog
  echo Error log says: `grep -i error $tlog`
  exit 1
else
  grep -q 'Programmed successfully' $tlog
  if ($status != 0) then
    echo Error: bit stream loading did not succeed. See $tlog
    echo Error log says: `grep -i error $tlog`
    echo Error: May need to reset with post-reset PCI config snapshot
  else
    echo Bitstream loaded successfully, proceeding to restore PCI config \( from $golden \)
    sleep 2
    echo Restoring configuration for $device from $golden.
    sudo cp $golden /sys/bus/pci/devices/$device/config
    if ($status != 0) then
       echo Error: Restoration of PCI config failed.
       echo Error: May need to reset with post-reset PCI config snapshot
    else
       echo PCI Configuration restored, checking that new bitstream is ok.
       sudo ocfrp_check $device
       if ($status == 0) then
          echo New bitstream is ok.
       else
          set bad = 1
          echo Error: New bitstream is not responding.
       endif
    endif
    set bad = 0
  endif
endif
echo rm $temp.*
exit $bad



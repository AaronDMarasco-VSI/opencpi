/****************************************************************************

Copyright 2007 Virginia Polytechnic Institute and State University

This file is part of the OSSIE Standard Interfaces.

OSSIE Standard Interfaces is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

OSSIE Standard Interfaces is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with OSSIE Standard Interfaces; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

****************************************************************************/

/*! \mainpage Standard Interfaces

\section description  Basic description
The StandardInterfaces library assists in rapid component development by
providing a list of common interfaces for radio development.  The interfaces
are written in the Interface Description Language (IDL), and the port
implementations are implemented in C++.  Python bindings are also available.

\subsection cppexample C++ Code Example

\code
// MyComponent.h

#include "standardinterfaces/complexShort_u.h"
#include "standardinterfaces/realChar_p.h"

class MyComponent_i : public virtual Resource_impl
{
  public:
    // ...

  private:
    // list components provides and uses ports
    standardInterfaces_i::realChar_p *bitsInPort;
    standardInterfaces_i::complexShort_u *symbolsOutPort;
    standardInterfaces::MetaData *metadata;
};
\endcode

And here is an example of the resulting source file

\code
// MyComponent.cpp

// Constructor
MyComponent_i::MyComponent_i() {
    // Create the ports
    bitsInPort = new standardInterfaces_i::realChar_p("bitsIn");
    symbolsOutPort = new standardInterfaces_i::complexShort_u("symbolsOut");
}

// Worker method
void MyComponent_i::ProcessData()
{
    PortTypes::CharSequence * bits_in;
    PortTypes::ShortSequence I_out, Q_out;

    while (continue_processing) {
        // Get data from port
        bitsInPort->getData(bits_in, metadata);
        
        // Process data here...
        unsigned int N = bits_in->length();
        I_out.length(N);
        Q_out.length(N);
        for (unsigned int i=0; i<N; i++) {
            I_out[i] = (*bits_in)[i];
            Q_out[i] = 0;
        }
        
        // Release input port
        bitsInPort->bufferEmptied();

        // Push output data
        symbolsOutPort->(I_out, Q_out, *metadata);
}
\endcode

Note that the MetaData object is optional.  If the component does not use the
MetaData interface the components would invoke the pushPacket() and getData()
methods without the last argument.  The figure below depicts the flow of data
through the ports between components.

\image latex example_complexShortMetaData.eps "complexShort interface with MetaData" width=0.9\textwidth
\image html example_complexShortMetaData.png "complexShort interface with MetaData"

\section radiometadata Radio Meta Data
The table below describes the meta data associated with each CORBA packet.

<table>
<tr><td><b>Name</b></td><td><b>Description</b></td><td><b>Type/Range</b></td></tr>
<tr><td> <tt>mod_scheme</tt> </td><td> Scheme used to modulate the data </td><td> <tt>UNKNOWN, PSK, DPSK, PAM, FSK, QAM</tt> </td></tr>
<tr><td> <tt>M</tt> </td><td> Number of symbols in <tt>mod_scheme</tt> constellation </td><td> <tt>unsigned long int</tt> </td></tr>
<tr><td> <tt>sampling_frequency</tt> </td><td> Frequency (Hz) at which the data are sampled </td><td> <tt>float</tt> </td></tr>
<tr><td> <tt>carrier_frequency</tt>  </td><td> Frequency (Hz) for which the signal is modulated </td><td> <tt>float</tt> </td></tr>
<tr><td> <tt>signal_bandwidth</tt>   </td><td> Bandwidth (Hz) of the signal </td><td> <tt>float</tt> </td></tr>
<tr><td> <tt>signal_strength</tt>    </td><td> Nominal strength of signal (dB) </td><td> <tt>float</tt> </td></tr>
<tr><td> <tt>eom</tt> </td><td> End-of-message flag </td><td> <tt>boolean</tt> </td></tr>
</table>

\section installation Installation

\verbatim
$ ./reconf
$ ./configure
$ make
# make install
\endverbatim

If installing the libraries for the first time you will also need to link the
libraries by running the following command with root permissions
\verbatim
# /sbin/ldconfig
\endverbatim

\subsection dependencies Software Build Dependencies

\section usage Usage

\section status Status and History

\section references References
*/


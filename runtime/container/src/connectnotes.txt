Connections are complicated.

The methods supplied by the generic port (and are expected to be used) are:

basicport::setPortParams: parse params buffercount, size, xferrole
basicport::setconnectparams: just setPortParams
basicport::applyConnectParams: setconnectparams, then STARTCONNECT with same params
basicport::chooseroles called by determine roles
port::determine roles and possibly alter BUFFER SIZES

connect::
   if inside:
      other.setconnectparams
      connectinside
   else
      setconnectparams on both sides
      determine roles
      startconnect on both sides
      finishconnect on both sides in two phases each

externalport:: (construct which is connect) (port params ext params - no CONNECT params)
if  external-is-provider-input:
  applyConnectParams(NULL<descriptor>, extparams) - these are both port params and connect params
                                                    since they are applied at once?
  dtp = createinputport(extparams)
  if local
    port.applyconnectparms(NULL, portparams)
    port.determineroles(mydesc)
    port.localconnect(dtport)
  else
    port.applyconnectParams(mydesc, portparams)
    port.determineroles(mydesc);
  endif
  outputdesc = port.finishconnect(mydesc, feedabck)
  if outputdesc
    dtport->finalize()
else external-is-user-output
  port.applyconnectparams(NULL, portparams);
  if local
    dtp = createoutput(port.dtport)
  else
    dtp = createoutput(port.desc)
  end if
  port.determineroles
  dtp->finalize(port.desc, mydesc, loadl
end if

    

??? Do port params override connect params or vv?
??? I would think since connection comes AFTER, it overrides...

The methods supplied by the OcpiRccPort
startconnect(otherdesc, params) - connect params at the start
   createinput or output port
   seems to allow for a NULL return???
localconnect
   createoutput port only for the collocated case
finishconnect
   dtp->finalize - perhaps with feedback
connectinside
   -- looks like a default impl ---
   setconnectparams(mypararms)
   determineroles
   other.startconnect( otherparams)
   startconnect(myparams)
   localconnect()
   finishconnect on both sides

The methods supplied by the OcpiHdlPort
  startconnect(desc and params ignored)
  finishconnect - does it all
  connectinside:
    startconnect that's all
    nothing to do so no call to other stuff

CONCLUSIONS:

nuke applyconnectparams - its too confusing with startconnect as a side effect
dt: createinput takes params
dt: createoutput takes desc?
createoutput has two variants - with a other port and with a otherdesc

when do we NOT have ports - is this for a remote descriptor-only thing or what?
buffer sizes get adjusted both in determine roles and in createoutputport!!!!!

perhaps just add code to connectinside for FPGA?
ie. to set buffer sizes just for purpose of propagation

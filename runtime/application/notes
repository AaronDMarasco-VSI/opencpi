There are several objects here:
- assembly - parsed metadata
- application - the instantiated application
- deployment - the potentially reusable deployment of the assembly to create the application
- scheduling entity that is the state when an assembly is deployed on the availablea assets.
- the library database - what is available for implementations.
- the container database - essentially the capabilities and capacities of the containers.

What is the best loop?  We have:
implementations
instances
containers

Foreach instance, we need a container and an implementation.

Foreach instance there are possible implementations, and then for each implementation there are candidate containers.
All the implementations can be handled withoutcontainer issues, and WITH selection filtering.
And this can be cached too.  So perhaps the assembly object can do this too - which means that the assembly object contains the candidate implementations that pass the selection filter.
Then the "deployment" is just a set of pairs: a reference to an assembly that just is a set of triples:
assembly-instance-name, implementation-ptr (artifact/impl pair), container.

How about separating the assembly-with-implementations to keep the runtine aspect (library) separate?

stack is:
- core assembly
- library assembly that collects library impls including filtering
- container assembly that collects the containers - reusable
- application object



#if 0
    ool Assembly::Instance::offerImplementation(OL::Implementation &impl) {
      // Here we are being offered an implementation.
      // We return true if this one completely satisfies us.
      // But if we don't like it, or we want to look at all of them, we return false.
      // In the look-for-best case, we have an initial filter, and remember one that passes that filter.
      // 1. Apply the initial go-no-go filter - implement connectivity checking?
      //   But the connectivity check must also perform "selection" on the connected workers.
      //   The recusion is limited though.  But making a candidate choice will be linked to other
      //   specific candidates.  So the recursion may force a candidate for a different assembly instance.
      //   Within a given artifact there may be multiple implementation instances:
      //    We need to qualify:  assembly instances vs. artifact instances.
      //    So different instances may have different connectivity.
      //    Perhaps they should be considered simply different implementations unless they are somehow truly indistinguishable...
      //   The initial filter:
      //   -- we already have checked that the artifact is basically good.
      //   -- we need to know what the readonly property values are for the selection.
      //   -- how much of this can we delegate to the library manager?  Perhaps it can
      //      process the metric expression anyway.
      //      should it parse more of the metadata?  This means it might cache more work for us...
      //      Thus it might offer up the metadata worker - hmmm good...
      //      Should it be doing this iteration/search anyway?  All we are offering from the assembly is connectivity and selection??  What about containers?

    }
    const char *Assembly::Instance::findMappings(bool firstOnly) {
      OL::Artifact &a =
	OL::Manager::findArtifacts(impl, wParams, connections, inst, *this);
    }
#endif				       


------------------

How to run an application and bind external ports of the app to something?

We might want:

file I/O
device I/O
URL connections (DDS etc.).

So we introduce the "-e" switch:

-f port=file (with options?) - can match builtin file read/write
-D port=device: [container][slot][card]device[port] - must be real
-u port=URL - can perhaps 

or

-e port=[schema]

file://host//file
file:

device:

===
Or do we instance and connect a device?

Baseline is that ocpirun options are shorthand for something fancier - a deployment document.

Per instance: selection, model, property, container, platform
Per external: file, device, url

But if the assembly has externals, is there a default?

Perhaps an "external" top level element can have the default?

We are inventing a syntax for things:

Output files have:
- message-in-file.

Input files have:
- messages-in-file
- force an opcode
- force a message size


URI:

scheme:[//authority][/abspath][?query][#fragment]

authority is user@host:port if internet

file:([//host/abs]|[/abs]|[rel])[?query]

So in general we have the query syntax as writable properties:

?name=value&name=value&

file:foo?messageInFile=true&messageSize=2048&opcode=2
device:[//container][/slot]device

So bottom line:

Be consistent with "instance"-related options.
Be consistent with URLs.

-f port=[//host][/]file
-D port=[//container/][slot/]device
-u port=URL...

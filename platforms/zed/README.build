This file describes how to build OpenCPI for the zed board and enable building
applications and components for it.  It is what you do on a development system
(not on the Zed board) before doing anything on the Zed hardware.  The basic
steps are summarized at the end of this file.

===============================================================================
Shortcut - use the pre-created SD card already in the OpenCPI tree
================================================================================

There is a SD card directory in this OpenCPI repository that may be
copied to a physical SD card and used to boot Linux and OpenCPI on the
ZedBoard, all without any building anything on the development
system.  If anything in the OpenCPI source tree is changed or updated,
or you need to change anything about the Linux kernel or its
configuration, or the contents of the root file system for booting
Linux, there is more to be done, and you need to do more to create new
contents for the SD card.

If not, assuming you have an SD card with a formatted FAT-32 (DOS-style) 
first partition, and assuming it is mounted on /media/xyz, you can just do

  % rm -r -f /media/xyz/*
  % cp platforms/zed/release/OpenCPI-SD/* /media/xyz
  % umount /media/xyz

Then remove the SD card, plug it into a properly configured (powered off) ZedBoard,
power on and run some simple applications that are already there.  If this will
serve your purposes (initially), you can skip the rest of this file and proceed to
the README.install for hardware setup.  Of course you can add any of your own
files to the SD card.

Summary:  you can use the pre-built SD card contents unless:
- You need to use a more up-to-date OpenCPI version.
- You need a more up-to-date or different Xilinx Linux release.

================================================================================
Building OpenCPI and preparing an SD card to boot from
================================================================================

There are two aspects of building OpenCPI: user mode code and kernel driver
code.  Both rely on the cross-compiler supplied in the Xilinx tools
release (the EDK).  So the first prerequisite is to install Xilinx ISE
and EDK tools.  We will refer to the Xilinx tools release number as
$XRN, and the pathname where Xilinx tools releases are installed as
$XROOT.  In a typical installation, XRN might be 14.6, and XROOT might
be /opt/Xilinx, so the current release would be installed in the

  /opt/Xilinx/14.6

directory.  Be sure to include the EDK in the installation (when
running the Xilinx installer) since that is where the cross compiler and
some other required files come from.  At the current time OpenCPI does not
use the Xilinx Vivado tools, only ISE and EDK.  The XRN and XROOT variables
are notional for this document.  You do not need to actually set those
variables.

From here we assume an Xilinx ISE+EDK installation on CentOS6 Linux.

We also assume that you have created a clone of the OpenCPI git
repository, placed it in a directory on a development system
(e.g. /home/myself/opencpi), and built and run OpenCPI on that
development host system.  Instructions for this are in the README
files for the development system platform (e.g. CentOS6).  When an
OpenCPI environment is established on the development system, the root
of the OpenCPI distribution will be in the OCPI_BASE_DIR environment
variable.

The OpenCPI installation includes certain artifacts that are derived
from one or more Xilinx Linux Kernel releases.  Under normal
circumstances these can be used as they exist in the OpenCPI tree.
The platforms/zed/release file is a link to the Xilinx linux release
that will be used during the remaining installation steps.  If you
need to change or customize the Xilinx Linux kernel release, see the
README.linux file.

In summary, the prerequisites are:
1. A Xilinx ISE+EDK installation at $XROOT/$XRN, something like /opt/Xilinx/14.6
2. A built/working OpenCPI installation on CentOS6 at $OCPI_BASE_DIR

================================================================================
Step 1. Customize and establish your build environment.
================================================================================

First, to build OpenCPI for mode zynq/arm code, you need to establish
the build environment for zynq cross-compilation.  OpenCPI user and
kernel code is built using the Xilinx-EDK-supplied ARM/Zynq
cross-build tools.  There is nothing specific to the Zed board about
about these Zynq tools.  The ocpized.sh file in the $OCPI_BASE_DIR is
an example you should *copy* and customize for your own environment.
It refers to the subsidiary file $OCPI_BASE_DIR/env/zynq.sh which you
should not need to modify.  Assuming you have already built OpenCPI
for CentOS6, you need to source this customized environment script in
a new shell/window, in $OCPI_BASE_DIR e.g.:

  % cp ocpized.sh myzed.sh
  { customize myzed.sh, especially to point to your Xilinx tools/license}
  % source myzed.sh

This establishes a cross-build environment for zed, setting a number of
environment variables appropriately.
You do *NOT* need to run any Xilinx-supplied initialization scripts.
Using these Xilinx ISE+EDK tools has been tested in ISE 14.6 and 14.7.

================================================================================
Step 2. Cross build prerequisite packages for Zynq
================================================================================

Before building OpenCPI for the embedded target, the prerequisite
libraries must be installed and cross-built for this embedded target.
This uses the same script as for the development host, but it is
running in a cross-building environment set up by your myzed.sh
script.

  % scripts/install-prerequisites.sh

================================================================================
Step 3. Build OpenCPI software using the Xilinx-supplied cross-compiler tools
================================================================================

After the above setup, the normal OpenCPI build scripts should function and succeed:

  % scripts/build-opencpi.sh

This should succeed and produce no particularly unusual warnings.  It
builds the runtime libraries, utility programs, components, examples
and device driver.  It relies on the release of the Xilinx Linux
kernel that is already estalished in the OpenCPI tree, in
platforms/zed/release.  In particular, the kernel aspects of the
OpenCPI build rely on a "kernel headers" package created there.  This
takes a few minutes.

================================================================================
Step 4. Build FPGA libraries, components, platform and bitstreams
================================================================================

In order to build the HDL/FPGA code, including test bitstreams, you do:

  % make hdl HdlPlatforms="isim_pf zed"

This will build all the HDL primitive libraries, components,
bitstreams for zed and for isim.  The OpenCPI HdlTarget for Zed is
"zync" and the HdlPlatform is "zed".  The OpenCPI HdlTarget for Isim
is "isim", and the HdlPlatform is "isim_pf".  This can take as much as
an hour depending on your development machine's capabilities.  Note that
any Xilinx license issues will only show up in the "map" phase for the
bitstreams.

================================================================================
Step 5. Creating and populating a directory to be copied to an SD card
================================================================================

A final software step to perform on the development system is to create and
populate a directory to be copied to an SD card and then to be plugged into the
Zed board.  The contents of the SD card directory tree is a combination
of:

 1. Binary files from a Xilinx Linux Kernel release from
    http://www.wiki.xilinx.com/Zynq+Releases
 2. Binary files built and stored in the OpenCPI tree that were patched from
    the Xilinx release and linux source code.
 3. Core files from the OpenCPI tree built from sources.
 4. Component library files from the OpenCPI tree (RCC and HDL).
                                                           
This resulting SD card can be used standalone (independent of the
network) or based on a network connection that allows the zynq
platform to communication with the development system.  The
network-based development setup mounts the development system from the
ZedBoard using NFS, so usually very few files really need to be on the
SD card itself.  In standalone mode, OpenCPI can be used with the
files on the SD card, and with no network.

There is a populated SD card tree at platforms/zed/release/OpenCPI-SD,
that can be used directly, but it is not updated for every patch
release in the repository.  These instructions prepare a directory
tree for an SD card locally (in this directory), to be copied to a
real SD card, that can then be unmounted, plugged into the Zed board,
and used to boot the ZedBoard.

There are two files that must be customized before making the SD card.
One for standalone mode and one for network mode (NFS mounting of the
development system).  If you are not using the network/NSF mode you
can ignore the second one.

Standalone mode startup script:
===============================

You should make copy of the "defaultsetup.sh" file into "mysetup.sh"
(here in the platforms/zed directory) and customize it, in particular,
specifying at least:

1. The system to be used as a time server
2. Your timezone.

These items are on the command line in mysetup.sh that runs the
internal zedsetup.sh script, which configures the zed system for
OpenCPI each time it boots.  Since the ZedBoard has no real time clock
these are needed to set the time properly.  If you truly have no
network connection, you can set the time server to "-".

When the SD card is created, this script will be copied to it, and
it is run each time the system is booted (manually for now).

% cp defaultsetup.sh mysetup.sh
{ customize mysetup.sh }

Network mode startup script:
===============================

Network mode is when you mount the development system (and the OpenCPI
tree), as an NFS server with the ZedBoard as NFS client.  This provides
easy and dynamic access to all of OpenCPI, and presumably any
components and applications you may have.  You can avoid customizing this
file if you only want to use standalone mode, but you must make sure
the "mynetsetup.sh" file exists.

Make a copy of the "defaultnetsetup.sh" file into "mynetsetup.sh"
(here in the platforms/zed directory) and customize it, in particular,
specifying at least:

1. The NFS "share name" of your development system.
2. The directory name relative to that mountable file system where the OpenCPI tree lives.
3. The system to be used as a time server.
4. Your timezone name.

All these items are on the command line in mynetsetup.sh that runs the
zednetsetup.sh script, which configures the zed system for OpenCPI
each time it boots, for network/NFS mode.  The network address of your
development system will be specified later, dynamically.

% cp defaultnetsetup.sh mynetsetup.sh
{ customize mynetsetup.sh }

Note the "mynetsetup.sh" script you copied to the SD card takes the
development system's IP address as an argument.  If it is fixed,
you could hard-wire it in this script.

Create new SD card contents
===============================

To create a directory that can be copied to an SD card, you use the
makeSD.sh script.  If run with no arguments it describes what it will
do.  If the single argument is "-", then it will populate the SD card
based on the current Xilinx Zynq Linux release installed in the
OpenCPI tree.  The current Xilinx Linux release is shown by doing: "ls
-l release", which shows a link to the current release.  If there are
other releases present, you can select a different one by indicating
it as the first argument.

This script depends on the OCPI_LIBRARY_PATHenvironment variable, since
it copies all valid component artifacts found in this path. 

 % ./makeSD.sh -

This script combines kernel release binaries from Xilinx, some linux
artifacts customized for OpenCPI, and the various compiled files in
the OpenCPI tree.  It creates a directory called "release/OpenCPI-SD"
after removing the previous one. It also includes the mysetup.sh and
mynetsetup.sh that you have just customized.  You can further
customize it if needed to add contents to the SD card, or of course
put additional content on the SD card itself later.

================================================================================
Step 6. Initialize (partition, erase) the SD card.
================================================================================

This step completely initializes, formats, and partitions the SD card,
whereas the next step copies the contents onto it. This step creates a 200MB
boot partition in FAT32 format, and also creates a second linux ext2
file system using the rest of the space on the card.  Because it is
partitioning the drive from scratch, there must be no mounted file
systems on the drive when it is executed.

If you don't want a "fresh" SD card, but want to use an existing one that is
correctly formatted for a ZedBoard boot disk, you can skip this step.

You must determine the linux device name of the SD card, usually something like
/dev/sdb.  The "sudo fdisk -l" command describes all disk devices on the system
and can help in identifying the device for the SD card you plugged in.
Using the wrong device name could erase the disk, so be careful!
Also, you can use the "mount" command to see if any of the partitions of the
disk are already mounted.  They should be unmounted before running this script.

The following script completely reinitializes/partitions/erases the SD card for
use with the ZedBoard.  The single argument is the linux disk device name.
The "sudo" is usually necessary unless the device has general write permission.

% sudo ./formatSD.sh /dev/sdX

================================================================================
Step 7. Put the Xilinx Linux + OpenCPI ZedBoard release onto the SD card
================================================================================

The source of this step is the directory created from the makeSD.sh script above,
which is release/OpenCPI-SD.  If you have just formatted the SD card with the 
previous step, you would need to mount it first using the mount command, or simply
unplug it and plug it in again, which normally automatically mounts it.

After it is mounted (e.g. /dev/sdb1 is mounted on /media/xyz)
  % rm -r -f /media/xyz/*
  % cp -r -p release/OpenCP-SD/* /media/xyz

If you have more files to add, do so now so you can remove it

  % umount /media/xyz

================================================================================
Summary of pre-hardware steps to prepare to run OpenCPI on Zed
================================================================================

Assuming you not taking the shortcut mentioned at the top of this file...

From the top level directory of an OpenCPI installation a.k.a. OCPI_BASE_DIR,
that is already functional for the CentOS6 system, with a Xilinx ISE+EDK installation,
in a fresh/new shell/window, do these steps:

 % cp ocpized.sh myzed.sh
 { customize myzed.sh for your build environment, e.g. where Xilinx tools are }
 { customize the Xilinx Linux release if needed - see README.linux if you need to}
 % source myzed.sh
 % scripts/install-prerequisites.sh
 % scripts/build-opencpi.sh
 % make hdl HdlPlatforms='isim_pf zed'
 % cd platforms/zed
 % cp defaultsetup.sh mysetup.sh
 % cp defaultnetsetup.sh mynetsetup.sh
 { customize mysetup.sh and mynetsetup.sh for your environment, etc. }
 % ./makeSD.sh -
 { If you need a freshly formatted SD card:
   plug your SD card in and figure out what the disk device name is for it.
   unmount any mounted partitions on the drive/disk
   BE CAREFUL TO GET IT RIGHT SINCE THAT DISK WILL BE ERASED

   % sudo ./formatSD.sh /dev/sdX
 }
 { Plug in the SD card, e.g. mounted as /media/xyz }
 % rm -r -f /media/xyz/*
 % cp -r -p release/OpenCP-SD/* /media/xyz
 % umount /media/xyz

Now everything is built and ready for the ZedBoard, and you have a bootable SD card for
using OpenCPI on a ZedBoard.  The README.install file describes how to install the
hardware and set it up to execute based on the OpenCPI system you just built and
the SD card you created.  There are two usage modes, one is network-based,
where the ZedBoard can talk to the development (CentOS6) system via network and NFS,
and the other is standalone/embedded mode where OpenCPI can be used even without
a network connection.


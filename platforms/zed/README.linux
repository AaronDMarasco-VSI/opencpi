For Zynq systems, OpenCPI uses the Linux kernel as supplied in Xilinx
Linux Zynq releases at http://www.wiki.xilinx.com/Zynq+Releases.
OpenCPI has a loadable Linux kernel device driver that must be built
against the Linux kernel being used, in this case from a Xilinx Zynq
Linux release.  We capture Xilinx binary Linux releases in this
OpenCPI code tree to make it easier to install and use OpenCPI on Zynq
systems.  For those that want to customize the Zynq Linux
installation, you can use these scripts as a guide to what the default
OpenCPI Zynq installation consists of and how it is created.

We capture the information from the Xilinx site in order to:
- Build the OpenCPI Linux kernel device driver (a loadable module)
- If needed (i.e. the Xilinx release needs patching), create a binary "device tree" file.
- If needed (i.e. the Xilinx release needs patching), create a linux kernel image
- If needed (i.e. the Xilinx release needs patching), create an initial root file system.
- Create a bootable SD card for the Zed system.

Some of this information is captured in the OpenCPI repository so that
there is no need to deal with the Xilinx site to get OpenCPI running
on the ZedBoard.  This information supports building all of OpenCPI,
including the Linux kernel driver, from source.  It also allows us to
combine the compiled-from-source artifacts of the OpenCPI build with
the binary files delivered as part of the Xilinx binary releases, to
create a bootable SD card.

The processes and scripts we use are documented here for those that
want different Linux releases than are already here, or need to
customize the Linux kernel.  They are not part of the normal OpenCPI
installation process for Zynq systems.  The normal installation simply
uses the Xilinx-release-based files and SD card directory that is
stored in the OpenCPI repository.

The steps we use to enable building of the OpenCPI Linux device
driver, and the creation of bootable SD cards are below, all run from
the platforms/zed directory in the OpenCPI tree.

1. Choose a release on the Xilinx web site for Zynq releases.

2. Obtain the file download URL and the git source repo tag associated with the release.

   Recent examples are:
   URL: http://www.wiki.xilinx.com/file/view/2013.4-release.tar.xz/483333010/2013.4-release.tar.xz

   Repo Tag: xilinx-v2013.4

3. Retrieve the binary Xilinx release using getXilinxLinuxRelease.sh script, providing
   the release name and the above URL as arguments, e.g.:

   % cd platforms/zed
   % ./getXilinxLinuxRelease.sh {xilinx-release-name} {URL as above}
   
4. Retrieve the Xilinx linux source release, into a local "git/linux-xlnx" subdirectory, which
   will be used temporarily and could be removed later.  It is not placed into the OpenCPI repo.
   Use the getXilinxLinuxSources.sh script, providing an argument to suppress the help message.
   E.g.: this obtains the sources in a local clone and shows the available tags

   % ./getXilinxLinuxSources.sh x
   % ./showXilinxLinuxTags.sh | grep {release-name-to-match}

   Note we grep for the release name, rather than the explicit repo tag so that we might see
   multiple repo tags that might include some patches since the official release came out.
   You can try a few different things to match against or provide no argument to list
   all tags in chronological order.

5. Next we create a "kernel headers" package from the source tree, for the release, based on the
   chosen repo tag.  This essentially builds the kernel from source in order to create the
   artifacts necessary to build loadable device drivers.  This script has two arguments, 
   the release name (as used above with ./getXilinxLinuxRelease.sh), and the the repo tag
   associated with that binary release:

   % ./createOpenCPIZedRelease.sh 2013.4 xilinx-v2013.4

   This script populates the <release-dir>/kernel-headers-{repo-tag} directory, and creates
   a symbolic link in the same directory called "kernel-headers" that points to this directory.
   Thus the repo tag is remembered in the kernel-headers-{repo-tag} directory name.

6. Make a default bootable SD card for OpenCPI with this Xilinx release.
   This script makes the bootable SD directory (for copying to a card) for this release.

   % ./makeSD.sh { release-name }

7. Add the release directory, containing the Xilinx binary release, plus the created
   kernel-headers package, into the git repo, when it is determined that it should be shared
   with the community.  E.g.

   git add release-2013.4
   git commit -m "establish Xilinx Zynq release 2013.4 with kernel headers and patches"
   git push

In the Zynq build environment, the OCPI_TARGET_KERNEL_DIR environment variable usually points to
$(OCPI_BASE_DIR)/platforms/zynq/release/kernel-headers.  Both the "release" and the
"kernel-headers" are symbolic links to actual releases and source repo tags.

Xilinx provides releases at www.wiki.xilinx.com, that are versioned the same
as the Xilinx tools releases, but the Xilinx Linux release does not have to be
the same as the Xilinx tools release that is installed.  However, the compiler comes from
the Xilinx tools release, so there is (unlikely) potential for incompatibility between
the compiler and the Xilinx Linux release if they are not compatible.

[As of this writing, we are using the Xilinx ISE 14.6 tools release, and the 2013.4
Xilinx Linux release].

There is a "doXilinxRelease.sh" script that runs all these scripts at once,
including the "makeSD.sh" script.

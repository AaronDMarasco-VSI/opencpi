# Copyright (c) 2009 Mercury Federal Systems.
# 
# This file is part of OpenCPI.
# 
# OpenCPI is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# OpenCPI is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with OpenCPI.  If not, see <http://www.gnu.org/licenses/>.

all: bin

ifneq ($(SYSTEM),)
SYSTEMOPTION="SYSTEM=$(SYSTEM)"
endif

include $(CPIDIR)/MakeVars.cpi
ifneq ($(OUTDIR),)
OBJDIR = $(OUTDIR)
else
OBJDIR = .
endif
include $(CPIDIR)/Makefile.cpi.common

ifneq ($(wildcard Makefile.cpi.imports),)
include Makefile.cpi.imports
endif

PACKAGE = $(notdir $(shell pwd))
WINLIB = $(patsubst %,$(OBJDIR)/%.lib,$(PACKAGE))
WINDLL = $(patsubst %,$(OBJDIR)/%.dll,$(PACKAGE))
UNIXLIB = $(patsubst %,$(OBJDIR)/lib%.a,$(PACKAGE))
UNIXSHLIB = $(patsubst %,$(OBJDIR)/lib%.$(SO),$(PACKAGE))
EXPORTSHLIB=$(CPIDIR)/lib/$(OUTDIR)/$(notdir $(UNIXSHLIB))
VXWORKSDKM = $(patsubst %,$(OBJDIR)/lib%.out,$(PACKAGE))

ifeq ($(SYSTEM),winnt)
EXCLUDE_FACILITIES += linux vxworksdkm

ifeq ($(BUILDSHAREDLIBRARIES),1)
PACKAGELIB = $(WINDLL)
else
PACKAGELIB = $(WINLIB)
endif

else
ifneq ($(filter linux macos,$(SYSTEM)),)

EXCLUDE_FACILITIES += winnt vxworksdkm
ifeq ($(BUILDSHAREDLIBRARIES),1)
PACKAGELIB = $(EXPORTSHLIB)
else
PACKAGELIB = $(UNIXLIB)
endif

else
ifeq ($(SYSTEM),vxworksdkm)

EXCLUDE_FACILITIES += linux winnt
ifeq ($(BUILDSHAREDLIBRARIES),1)
PACKAGELIB = $(VXWORKSDKM)
else
PACKAGELIB = $(UNIXLIB)
endif

endif
endif
endif

GENERATED = $(filter-out $(EXCLUDE_FACILITIES),$(patsubst %/idl,%,$(wildcard */idl)))
FACILITIES = $(filter-out bin lib Makefile $(EXCLUDE_FACILITIES),$(patsubst %,%,$(wildcard *)))

CSOURCES = $(filter-out $(addprefix %/,$(EXCLUDE_SOURCES)),$(wildcard $(patsubst %,%/src/*.c,$(FACILITIES))))
CXXSOURCES = $(filter-out $(addprefix %/,$(EXCLUDE_SOURCES)),$(wildcard $(patsubst %,%/src/*.cxx,$(FACILITIES)))) \
	$(patsubst %.idl,%.cxx,$(wildcard $(patsubst %,%/idl/*.idl,$(FACILITIES)))) 
CPPSOURCES = $(filter-out $(addprefix %/,$(EXCLUDE_SOURCES)),$(wildcard $(patsubst %,%/src/*.cpp,$(FACILITIES)))) \
	$(patsubst %.idl,%.cpp,$(wildcard $(patsubst %,%/idl/*.idl,$(FACILITIES)))) 

ASMSOURCES = $(filter-out $(addprefix %/,$(EXCLUDE_SOURCES)),$(wildcard $(patsubst %,%/src/*.asm,$(FACILITIES))))

ifneq ($(OBJDIR),.)
OBJECTS = $(sort $(patsubst %.c,$(OBJDIR)/%.obj,$(notdir $(CSOURCES))) \
	$(patsubst %.cxx,$(OBJDIR)/%.obj,$(notdir $(CXXSOURCES))) \
	$(patsubst %.cpp,$(OBJDIR)/%.obj,$(notdir $(CPPSOURCES))) \
	$(patsubst %.asm,$(OBJDIR)/%.obj,$(notdir $(ASMSOURCES))))
else
OBJECTS = $(sort $(patsubst %.c,%.obj,$(CSOURCES)) \
	$(patsubst %.cxx,%.obj,$(CXXSOURCES)) \
	$(patsubst %.cpp,%.obj,$(CPPSOURCES)) \
	$(patsubst %.asm,%.obj,$(ASMSOURCES)))
endif

.SUFFIXES:
.PHONY: bin lib objects depends generated clean distclean cleanup distcleanup

ifeq ($(findstring bin,$(EXCLUDE_FACILITIES)),bin)
bin: lib
else
bin: lib
	if test -d bin/src ; then \
		if test -f bin/src/Makefile.cpi ; then \
			$(MAKE) -C bin/src -f Makefile.cpi $(SYSTEMOPTION) ; \
		else \
			$(MAKE) -C bin/src -f $(CPIDIR)/Makefile.cpi.for-bin $(SYSTEMOPTION) ; \
		fi ; \
	fi
endif

lib: objects
	if test -f Makefile.cpi ; then \
		$(MAKE) -f Makefile.cpi $(PACKAGELIB) $(SYSTEMOPTION) ; \
	else \
		$(MAKE) -f $(CPIDIR)/Makefile.cpi.for-pkg $(SYSTEMOPTION) $(PACKAGELIB) ; \
	fi

ifneq ($(filter linux macos,$(SYSTEM)),)
$(UNIXLIB): $(OBJECTS)
	-rm -f $@
	ar r $@ $(OBJECTS)

$(EXPORTSHLIB): $(UNIXSHLIB)
	if ! test -d $(CPIDIR)/lib; then mkdir $(CPIDIR)/lib; fi
	if ! test -d $(CPIDIR)/lib/$(OUTDIR); then mkdir $(CPIDIR)/lib/$(OUTDIR); fi
	cp -p $(UNIXSHLIB) $@

$(UNIXSHLIB): $(OBJECTS)
	$(CXX) $(SHAREDLIBFLAGS) $(SHARED) -o $@ $(OBJECTS) \
	       	$(patsubst %,-L%$(OBJDIR),$(dir $(ALLLIBS))) \
		$(addprefix -L,$(dir $(SYSLIBS))) \
		$(addprefix -l,$(notdir $(ALLLIBS) $(SYSLIBS)))
endif

ifeq ($(SYSTEM),winnt)
ifeq ($(WINNT_TOOLCHAIN),mingw)
$(WINLIB): $(OBJECTS)
	-rm -f $@
	$(AR) r $@ $(OBJECTS)

$(WINDLL): $(OBJECTS)
	$(CXX) --shared -o $@ \
		-Wl,--enable-runtime-pseudo-reloc \
		$(OBJECTS) \
		$(patsubst %,-L%$(OBJDIR),$(dir $(ALLLIBS))) \
		$(addprefix -L,$(dir $(SYSLIBS))) \
		$(addprefix -l,$(notdir $(ALLLIBS) $(SYSLIBS))) \
		$(BASICLIBS)
else

$(WINLIB): $(OBJECTS)
	lib /nologo /OUT:$@ $(OBJECTS)

ifeq ($(BUILDSHAREDLIBRARIES),1)
$(error Building Windows shared libraries with msvc is not supported yet.)
endif

$(WINDLL): $(OBJECTS)
	echo "Not implemented yet."
	exit 1

endif
endif

ifeq ($(SYSTEM),vxworksdkm)
$(UNIXLIB): $(OBJECTS)
	-rm -f $@
	$(AR) r $@ $(OBJECTS)

#
# This is for building "shared" libraries for everything.
#

$(VXWORKSDKM): $(OBJECTS)
	$(NM) $(OBJECTS) | $(MUNCH) \
		> $(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.c
	$(CC) $(CFLAGS) -fdollars-in-identifiers \
		-o $(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.o \
		$(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.c
	$(CC) -o "$@" -r -nostdlib -Wl,-X \
		-T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT \
		$(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.o \
		$(OBJECTS)
endif

objects: generated
	if test "x$(OUTDIR)" != "x" ; then mkdir -p $(OUTDIR) ; fi
	for facility in $(GENERATED) ; do \
		if test -d $$facility/idl ; then \
			if test -f $$facility/idl/Makefile.cpi ; then \
				$(MAKE) -C $$facility/idl -f Makefile.cpi $(SYSTEMOPTION) $@ ; \
			else \
				$(MAKE) -C $$facility/idl -f $(CPIDIR)/Makefile.cpi.for-idl $(SYSTEMOPTION) $@ ; \
			fi ; \
		fi || exit 1 ; \
	done && \
	for facility in $(FACILITIES) ; do \
		if test -d $$facility/src ; then \
			if test -f $$facility/src/Makefile.cpi ; then \
				$(MAKE) -C $$facility/src -f Makefile.cpi $(SYSTEMOPTION) $@ ; \
			else \
				$(MAKE) -C $$facility/src -f $(CPIDIR)/Makefile.cpi.for-src $(SYSTEMOPTION) $@ ; \
			fi ; \
		fi || exit 1 ; \
	done

generated:
	for facility in $(GENERATED) ; do \
		if test -d $$facility/idl ; then \
			if test -f $$facility/idl/Makefile.cpi ; then \
				$(MAKE) -C $$facility/idl -f Makefile.cpi $(SYSTEMOPTION) $@ ; \
			else \
				$(MAKE) -C $$facility/idl -f $(CPIDIR)/Makefile.cpi.for-idl $(SYSTEMOPTION) $@ ; \
			fi ; \
		fi || exit 1 ; \
	done && \
	for facility in $(FACILITIES) ; do \
		if test -d $$facility/src ; then \
			if test -f $$facility/src/Makefile.cpi ; then \
				$(MAKE) -C $$facility/src -f Makefile.cpi $(SYSTEMOPTION) $@ ; \
			else \
				$(MAKE) -C $$facility/src -f $(CPIDIR)/Makefile.cpi.for-src $(SYSTEMOPTION) $@ ; \
			fi ; \
		fi || exit 1 ; \
	done && \
	if test -d bin/src ; then \
		if test -f bin/src/Makefile.cpi ; then \
			$(MAKE) -C bin/src -f Makefile.cpi $(SYSTEMOPTION) $@ ; \
		else \
			$(MAKE) -C bin/src -f $(CPIDIR)/Makefile.cpi.for-bin $(SYSTEMOPTION) $@ ; \
		fi ; \
	fi

clean distclean:
	for facility in $(FACILITIES) $(EXCLUDE_FACILITIES) ; do \
		if test -d $$facility/idl ; then \
			if test -f $$facility/idl/Makefile.cpi ; then \
				$(MAKE) -C $$facility/idl -f Makefile.cpi $@ ; \
			else \
				$(MAKE) -C $$facility/idl -f $(CPIDIR)/Makefile.cpi.for-idl $@ ; \
			fi ; \
		fi && \
		if test -d $$facility/src ; then \
			if test -f $$facility/src/Makefile.cpi ; then \
				$(MAKE) -C $$facility/src -f Makefile.cpi $@ ; \
			else \
				$(MAKE) -C $$facility/src -f $(CPIDIR)/Makefile.cpi.for-src $@ ; \
			fi ; \
		fi || exit 1 ; \
	done && \
	if test -d bin/src ; then \
		if test -f bin/src/Makefile.cpi ; then \
			$(MAKE) -C bin/src -f Makefile.cpi $@ ; \
		else \
			$(MAKE) -C bin/src -f $(CPIDIR)/Makefile.cpi.for-bin $@ ; \
		fi ; \
	fi
	-rm -f *vxdkm-ctdc* *.vxe *.exe *.obj *.out *.map *.o *.so *.dylib *.ilk *.sbr *.suo *.sln *.pdb *.bsc core* *.d *~
	-rm -f $(OBJDIR)/*vxdkm-ctdc* $(OBJDIR)/*.vxe $(OBJDIR)/*.exe $(OBJDIR)/*.obj $(OBJDIR)/*.out $(OBJDIR)/*.map $(OBJDIR)/*.o $(OBJDIR)/*.so $(OBJDIR)/*.ilk $(OBJDIR)/*.dylib \
		$(OBJDIR)/*.sbr $(OBJDIR)/*.suo $(OBJDIR)/*.sln $(OBJDIR)/*.pdb $(OBJDIR)/*.bsc $(OBJDIR)/core* $(OBJDIR)/*.d $(OBJDIR)/*~
	-rm -f $(WINLIB) $(WINDLL) $(UNIXLIB) $(UNIXSHLIB) $(VXWORKSDKM)
	-if test "x$(OUTDIR)" != "x" ; then rm -rf $(OUTDIR) ; fi
	find . -name '*~' -exec rm {} \;
	rm -rf $(CPIDIR)/lib/*.so;


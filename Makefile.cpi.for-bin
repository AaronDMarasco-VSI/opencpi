# Copyright (c) 2009 Mercury Federal Systems.
# 
# This file is part of OpenCPI.
# 
# OpenCPI is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# OpenCPI is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with OpenCPI.  If not, see <http://www.gnu.org/licenses/>.

all: executables

include ../../../../../MakeVars.cpi
ifneq ($(OUTDIR),)
OBJDIR = ../../$(OUTDIR)
LIBDIR = $(OBJDIR)
else
OUTDIR = .
OBJDIR = .
LIBDIR = ../..
endif
include ../../../../../Makefile.cpi.common

ifneq ($(wildcard ../../Makefile.cpi.imports),)
include ../../Makefile.cpi.imports
endif

ALLINC += . $(wildcard ../../*/include) $(wildcard ../../*/idl) $(EXTRA_INCLUDES)

#
# Add this package's library to $(ALLLIBS).
#

ifeq ($(SYSTEM),winnt)
ifeq ($(BUILDSHAREDLIBRARIES),1)
ALLLIBS := $(patsubst $(LIBDIR)/%.dll,../../%,$(wildcard $(LIBDIR)/*.dll)) $(ALLLIBS)
else
ALLLIBS := $(patsubst $(LIBDIR)/%.lib,../../%,$(wildcard $(LIBDIR)/*.lib)) $(ALLLIBS)
endif
else
ifeq ($(SYSTEM),linux)
ifeq ($(BUILDSHAREDLIBRARIES),1)
ALLLIBS := $(patsubst $(LIBDIR)/lib%.so,../../%,$(wildcard $(LIBDIR)/lib*.so)) $(ALLLIBS)
else
ALLLIBS := $(patsubst $(LIBDIR)/lib%.a,../../%,$(wildcard $(LIBDIR)/lib*.a)) $(ALLLIBS)
endif
else
ifeq ($(SYSTEM),vxworksdkm)
ifeq ($(BUILDSHAREDLIBRARIES),0)
ALLLIBS := $(patsubst $(LIBDIR)/lib%.a,../../%,$(wildcard $(LIBDIR)/lib*.a)) $(ALLLIBS)
endif
endif
endif
endif

ifeq ($(SYSTEM),vxworksdkm)
EXCLUDE_SOURCES += %-vxdkm-ctdc.c
endif

#
# C/C++ files
#

CSOURCES = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *.c))
CXXSOURCES = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *.cxx))
ASMSOURCES = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *.asm))
COBJECTS = $(patsubst %.c,$(OBJDIR)/%.obj,$(CSOURCES))
CXXOBJECTS = $(patsubst %.cxx,$(OBJDIR)/%.obj,$(CXXSOURCES))
ASMOBJECTS = $(patsubst %.asm,$(OBJDIR)/%.obj,$(ASMSOURCES))
OBJECTS = $(COBJECTS) $(CXXOBJECTS) $(ASMOBJECTS)
CDEPENDS = $(patsubst %.c,%.d,$(CSOURCES))
CXXDEPENDS = $(patsubst %.cxx,%.d,$(CXXSOURCES))

CMAINS = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *_main.c))
CXXMAINS = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *_main.cxx))
OTHEROBJS = $(filter-out %_main.obj,$(OBJECTS))

ORIGEXECUTABLES = $(patsubst %_main.c,$(OBJDIR)/%_main.exe,$(CMAINS)) \
	$(patsubst %_main.cxx,$(OBJDIR)/%_main.exe,$(CXXMAINS))
WINNTEXECUTABLES = $(patsubst %_main.c,$(OBJDIR)/%.exe,$(CMAINS)) \
	$(patsubst %_main.cxx,$(OBJDIR)/%.exe,$(CXXMAINS))
LINUXEXECUTABLES = $(patsubst %_main.c,$(OBJDIR)/%,$(CMAINS)) \
	$(patsubst %_main.cxx,$(OBJDIR)/%,$(CXXMAINS))
VXWORKSDKMEXECUTABLES = $(patsubst %_main.c,$(OBJDIR)/%.out,$(CMAINS)) \
	$(patsubst %_main.cxx,$(OBJDIR)/%.out,$(CXXMAINS))
ALLEXECUTABLES = $(ORIGEXECUTABLES) $(WINNTEXECUTABLES) \
	$(LINUXEXECUTABLES) $(VXWORKSDKMEXECUTABLES)

ifeq ($(SYSTEM),winnt)
EXECUTABLES = $(WINNTEXECUTABLES)
else
ifeq ($(SYSTEM),linux)
EXECUTABLES = $(LINUXEXECUTABLES)
else
ifeq ($(SYSTEM),vxworksdkm)
EXECUTABLES = $(VXWORKSDKMEXECUTABLES)
endif
endif
endif

#
# Rules
#

.PHONY: objdir executables depends generated clean distclean cleanup distcleanup

objdir:
	if test "x$(OUTDIR)" != "x" ; then mkdir -p $(OBJDIR) ; fi

depends: $(CDEPENDS) $(CXXDEPENDS)
generated: depends $(ALLGENERATED)
executables: generated objdir $(EXECUTABLES)
clean: cleanup
	rm -f $(OBJECTS) $(ALLEXECUTABLES)
distclean: distcleanup
	rm -f $(OBJECTS) $(ALLEXECUTABLES) $(ALLGENERATED)

ifeq ($(SYSTEM),winnt)
$(OBJDIR)/%.exe: $(OBJDIR)/%_main.exe
	cp $< $@
else
ifeq ($(SYSTEM),linux)
$(OBJDIR)/%: $(OBJDIR)/%_main.exe
	cp -p $< $@; touch $@
else
ifeq ($(SYSTEM),vxworksdkm)
$(OBJDIR)/%.out: $(OBJDIR)/%_main.exe
	cp $< $@
endif
endif
endif

ifeq ($(SYSTEM),winnt)
ifeq ($(BUILDSHAREDLIBRARIES),1)
$(EXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/*.dll) \
	$(join $(addsuffix $(OUTDIR)/,$(dir $(ALLLIBS))),$(addsuffix .dll,$(notdir $(ALLLIBS))))
else
$(EXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/*.lib) \
	$(join $(addsuffix $(OUTDIR)/,$(dir $(ALLLIBS))),$(addsuffix .lib,$(notdir $(ALLLIBS))))
endif
else
ifeq ($(SYSTEM),linux)
ifeq ($(BUILDSHAREDLIBRARIES),1)
$(EXECUTABLES): $(OBJDIR)/%: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/lib*.so) \
	$(join $(addsuffix $(OUTDIR)/,$(dir $(ALLLIBS))),$(patsubst %,lib%.so,$(notdir $(ALLLIBS))))
else
$(EXECUTABLES): $(OBJDIR)/%: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/lib*.a) \
	$(join $(addsuffix $(OUTDIR)/,$(dir $(ALLLIBS))),$(patsubst %,lib%.a,$(notdir $(ALLLIBS))))
endif
else
ifeq ($(SYSTEM),vxworksdkm)

ifeq ($(BUILDSHAREDLIBRARIES),1)
$(EXECUTABLES): $(OBJDIR)/%.out: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS)
else
$(EXECUTABLES): $(OBJDIR)/%.out: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/lib*.a) \
	$(join $(addsuffix $(OUTDIR)/,$(dir $(ALLLIBS))),$(patsubst %,lib%.a,$(notdir $(ALLLIBS))))
endif

endif
endif
endif

#
# Direct dependencies for C/C++ files
#

$(COBJECTS): $(OBJDIR)/%.obj: %.c
$(CXXOBJECTS): $(OBJDIR)/%.obj: %.cxx
$(ASMOBJECTS): $(OBJDIR)/%.obj: %.asm
$(CDEPENDS): %.d: %.c
$(CXXDEPENDS): %.d: %.cxx

#
# Include generated dependency files
#

ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
ifneq ($(wildcard *.d),)
include *.d
endif
endif

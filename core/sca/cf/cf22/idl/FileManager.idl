#ifndef _FILEMANAGER_IDL
#define _FILEMANAGER_IDL

#include "FileSystem.idl"

module CF
{
  /**
   *  Multiple, distributed FileSystems may be accessed through a 
   * FileManager. The FileManager interface appears to be a single 
   * FileSystem although the actual file storage may span multiple physical 
   * file systems.  This is called a federated file system. A federated file 
   * system is created using the mount and unmount operations. Typically, 
   * the Domain Manager or system initialization software will invoke these 
   * operations.
   * 
   * The FileManager inherits the IDL interface of a FileSystem. Based upon 
   * the pathname of a directory or file and the set of mounted filesystems, 
   * the FileManager will delegate the FileSystem operations to the 
   * appropriate FileSystem.  For example, if a FileSystem is mounted at 
   * /ppc2, an open operation for a file called /ppc2/profile.xml would be 
   * delegated to the mounted FileSystem. The mounted FileSystem will be 
   * given the filename relative to it. In this example the FileSystem's 
   * open operation would receive /profile.xml as the fileName argument.
   * 
   * Another example of this concept can be shown using the copy operation.  
   * When a client invokes the copy operation, the FileManager will delegate 
   * operations to the appropriate FileSystems (based upon supplied 
   * pathnames) thereby allowing copy of files between filesystems.
   * 
   * If a client does not need to mount and unmount FileSystems, it can 
   * treat the FileManager as a FileSystem by CORBA widening a FileManager 
   * reference to a FileSystem reference.  One can always widen a 
   * FileManager to a FileSystem since the FileManager is derived from a 
   * FileSystem.
   * 
   * The FileManager's inherited FileSystem operations behavior implements 
   * the FileSystem operations against the mounted file systems.  The 
   * FileSystem operations ensure that the filename/directory arguments 
   * given are absolute pathnames relative to a mounted FileSystem.  The 
   * FileManager's FileSystem operations removes the FileSystem mounted name 
   * from the input fileName before passing the fileName to an operation on 
   * a mounted FileSystem.
   * 
   * The FileManager uses the mounted FileSystem for FileSystem operations 
   * based upon the mounted FileSystem name that exactly matches the input 
   * fileName to the lowest matching subdirectory.
   * 
   * The query operation returns the combined mounted file systems 
   * information to the calling client based upon the given input 
   * fileSystemProperties' IDs.  As a minimum, the query operation supports 
   * the following input fileSystemProperties IDs:
   * 1. SIZE - a property item ID value of "SIZE" will cause the query   operation to return the combined total size of all the mounted file 
   * system as an unsigned long long property value.
   * 2. AVAILABLE_SPACE - a property item ID value of "AVAILABLE_SPACE" will 
   * cause the query operation to return the combined total available space 
   * (in octets) of all the mounted file system as unsigned long long 
   * property value.
   * 
   * The query operation raises the UnknownFileSystemProperties exception 
   * when the input fileSystemProperties parameter contains an invalid 
   * property ID.
   */
  
  interface FileManager : FileSystem {
    /**
     *  The Mount structure identifies a FileSystem mounted within a 
     * FileManager.
     */
    
    struct MountType
    {
      string mountPoint;
      FileSystem fs;
    };
    
    /**
     *  This type defines an unbounded sequence of mounted 
     * FileSystems.
     */
    
    typedef sequence <MountType> MountSequence;
    
    /**
     *  This exception indicates a mount point does not exist within 
     * the FileManager
     */
    
    exception NonExistentMount {
    };
    
    /**
     *  This exception indicates the FileSystem is a null (nil) object 
     * reference.
     */
    
    exception InvalidFileSystem {
    };
    
    /**
     *  This exception indicates the mount point is already in use in 
     * the file manager.
     */
    
    exception MountPointAlreadyExists {
    };
    
    /**
     *  The FileManager supports the notion of a federated file 
     * system.  To create a federated file system, the mount operation 
     * associated a FileSystem with a mount point (a directory name). 
     * 
     * The mount operation associates the specified FileSystem with the 
     * given mountPoint.  A mountPoint name begins with a "/".  A 
     * mountPoint name is a logical directory name for a FileSystem.
     * 
     * The mount operation raises the NonExistentMount exception when 
     * the mountPoint (directory) name is not an absolute pathname 
     * relative to the mounted file. 
     * 
     * The mount operation raises the MountPointAlreadyExists exception 
     * when the mountPoint already exists in the file manager.
     * 
     * The InvalidFileSystem exception is raised when the input 
     * FileSystem is a null object reference.
     */
    void mount (
      in string mountPoint,
      in FileSystem file_System
      )      
      raises (InvalidFileName, InvalidFileSystem, 
              MountPointAlreadyExists);
      
    /**
     *  The unmount operation removes a mounted FileSystem from the 
     * FileManager whose mounted name matches the input mountPoint name.  
     * The unmount operation raises NonExistentMount when the mount 
     * point does not exist within the FileManager.
     */
    void unmount (
      in string mountPoint
      )      
      raises (NonExistentMount);
      
    /**
     *  The getMounts operation returns the FileManager's mounted 
     * FileSystems.
     */
    MountSequence getMounts ();
      
  };
};

#pragma version CF::FileManager 1.0

#endif
